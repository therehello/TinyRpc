cmake_minimum_required(VERSION 3.6.0)

set(CMAKE_C_COMPILER /usr/bin/clang)
set(CMAKE_CXX_COMPILER /usr/bin/clang++)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# 查找clang-format
find_program(CLANG_FORMAT_BIN NAMES clang-format)

if("${CLANG_FORMAT_BIN}" STREQUAL "CLANG_FORMAT_BIN-NOTFOUND")
  message(WARNING "Couldn't find clang-format.")
else()
  message(STATUS "Found clang-format at ${CLANG_FORMAT_BIN}")
endif()

# 查找clang-tidy
find_program(CLANG_TIDY_BIN NAMES clang-tidy)

if("${CLANG_TIDY_BIN}" STREQUAL "CLANG_TIDY_BIN-NOTFOUND")
  message(WARNING "Couldn't find clang-tidy.")
else()
  message(STATUS "Found clang-tidy at ${CLANG_TIDY_BIN}")
endif()

# 查找clang-apply-replacements
find_program(CLANG_APPLY_REPLACEMENTS_BIN NAMES clang-apply-replacements)

if("${CLANG_APPLY_REPLACEMENTS_BIN}" STREQUAL
   "CLANG_APPLY_REPLACEMENTS_BIN-NOTFOUND")
  message(WARNING "Couldn't find clang-apply-replacements.")
else()
  message(
    STATUS "Found clang-apply-replacements at ${CLANG_APPLY_REPLACEMENTS_BIN}")
endif()

# 查找python3
find_program(PYTHON3_BIN NAMES python3)

if("${PYTHON3_BIN}" STREQUAL
   "PYTHON3_BIN-NOTFOUND")
  message(WARNING "Couldn't find python3.")
else()
  message(
    STATUS "Found python3 at ${PYTHON3_BIN}")
endif()

project(
  TinyRpc
  VERSION 0.1.0
  LANGUAGES C CXX)

# 启用测试
enable_testing()

# 设置编译命令
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
set(CMAKE_CXX_FLAGS_DEBUG
    "${CMAKE_CXX_FLAGS_DEBUG} -Wall -Wextra -Wshadow -Wpedantic")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Woverflow -Wfloat-equal")
set(CMAKE_CXX_FLAGS_DEBUG
    "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address,undefined")

# 设置头路径
set(TINYRPC_SRC_INCLUDE_DIR src/include)
set(TINYRPC_THIRD_PARTY_INCLUDE_DIR third_party)
include_directories(${TINYRPC_SRC_INCLUDE_DIR}
                    ${TINYRPC_THIRD_PARTY_INCLUDE_DIR})

add_subdirectory(third_party)
add_subdirectory(src)
add_subdirectory(test)

set(TINYRPC_BUILD_SUPPORT_DIR "${CMAKE_SOURCE_DIR}/build_support")

# #########################################
# "make format"
# "make check-format"
# #########################################
string(CONCAT TINYRPC_FORMAT_DIRS
        "${CMAKE_CURRENT_SOURCE_DIR}/src,"
        "${CMAKE_CURRENT_SOURCE_DIR}/test,"
)

# Runs clang format and updates files in place.
add_custom_target(format ${TINYRPC_BUILD_SUPPORT_DIR}/run_clang_format.py
        ${CLANG_FORMAT_BIN}
        ${TINYRPC_BUILD_SUPPORT_DIR}/clang_format_exclusions.txt
        --source_dirs
        ${TINYRPC_FORMAT_DIRS}
        --fix
        --quiet
)

# Runs clang format and exits with a non-zero exit code if any files need to be reformatted
add_custom_target(check-format ${TINYRPC_BUILD_SUPPORT_DIR}/run_clang_format.py
        ${CLANG_FORMAT_BIN}
        ${TINYRPC_BUILD_SUPPORT_DIR}/clang_format_exclusions.txt
        --source_dirs
        ${TINYRPC_FORMAT_DIRS}
        --quiet
)

# ##############################################################################
# "make check-clang-tidy" target
# ##############################################################################
# runs clang-tidy and exits with a non-zero exit code if any errors are found.
# note that clang-tidy automatically looks for a .clang-tidy file in parent
# directories
add_custom_target(
  check-clang-tidy
  ${TINYRPC_BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script
  -clang-tidy-binary ${CLANG_TIDY_BIN} # using our clang-tidy binary
  -p ${CMAKE_BINARY_DIR} # using cmake's generated compile commands
)
add_custom_target(
  fix-clang-tidy
  ${TINYRPC_BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script
  -clang-tidy-binary
  ${CLANG_TIDY_BIN} # using our clang-tidy binary
  -p
  ${CMAKE_BINARY_DIR} # using cmake's generated compile commands
  -clang-apply-replacements-binary
  ${CLANG_APPLY_REPLACEMENTS_BIN} # using our clang-apply-replacements binary
  -fix # apply suggested changes generated by clang-tidy
)
add_custom_target(
  check-clang-tidy-diff
  ${TINYRPC_BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script
  -clang-tidy-binary
  ${CLANG_TIDY_BIN} # using our clang-tidy binary
  -p
  ${CMAKE_BINARY_DIR} # using cmake's generated compile commands
  -only-diff # only check diff files to master
)
add_custom_target(
  fix-clang-tidy-diff
  ${TINYRPC_BUILD_SUPPORT_DIR}/run_clang_tidy.py # run LLVM's clang-tidy script
  -clang-tidy-binary
  ${CLANG_TIDY_BIN} # using our clang-tidy binary
  -p
  ${CMAKE_BINARY_DIR} # using cmake's generated compile commands
  -clang-apply-replacements-binary
  ${CLANG_APPLY_REPLACEMENTS_BIN} # using our clang-apply-replacements binary
  -fix # apply suggested changes generated by clang-tidy
  -only-diff # only check diff files to master
)
